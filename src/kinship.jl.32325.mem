        - ###############################################################
        - # function to calculate kinship from genotype probability array
        - ###############################################################
        - 
        - function calcKinship(geno::Matrix{Float64})
        - 
        -     # get dimensions
        0     sz = size(geno)
        - 
        -     # assign to variables for convenience
        -     nr = sz[1]
        -     nc = sz[2]
        - 
        -     # if empty then there is nothing to do
        0     if(nr==0)
        0         error("Nothing to do here.")
        -     else
        -         # make matrix to hold distances
    50064         d = zeros(nr,nr)
        -     end
        - 
        -     # assign diagonals to ones
        0     for i=1:nr
        0         d[i,i] = 1.0
        -     end
        - 
        -     ncomplete = nc
        -     # off-diagonal elements need to be calculated
        0     if(nr>=2)
        0         for i=1:(nr-1)
        0             for j=(i+1):nr
        0                 p1 = geno[i,:]
        0                 p2 = geno[j,:]
361734048                 d[i,j] = d[j,i] = sum( p1 .* p2 + (1 .- p1) .* (1 .- p2) ) / ncomplete
        - 
        -             end
        -         end
        -     end
        0     return d
        - end
        - 
        - 
        - function calcKinship(geno::Matrix{Union{Missing,Float64}})
        - 
        -     # get dimensions
        -     sz = size(geno)
        - 
        -     # assign to variables for convenience
        -     nr = sz[1]
        -     nc = sz[2]
        - 
        -     # if empty then there is nothing to do
        -     if(nr==0)
        -         error("Nothing to do here.")
        -     else
        -         # make matrix to hold distances
        -         d = zeros(nr,nr)
        -     end
        - 
        -     # assign diagonals to ones
        -     for i=1:nr
        -         d[i,i] = 1.0
        -     end
        - 
        -     iscomplete = Array{Bool,1}(undef,nc)
        -     ncomplete::Int64 = 0
        -     # off-diagonal elements need to be calculated
        -     if(nr>=2)
        -         for i=1:(nr-1)
        -             for j=(i+1):nr
        -                 iscomplete = .!( ismissing.(geno[i,:]) .& ismissing.(geno[j,:]) )
        -                 ncomplete = sum(iscomplete)
        -                 p1 = geno[i,iscomplete]
        -                 p2 = geno[j,iscomplete]
        -                 d[i,j] = d[j,i] = sum( p1 .* p2
        -                                        + (1-p1) .* (1-p2) ) / ncomplete
        - 
        -             end
        -         end
        -     end
        -     return d
        - end
